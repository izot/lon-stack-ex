// Copyright Â© 2022 Dialog Semiconductor
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in 
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef LTNETWORKMANAGERLIT_H
#define LTNETWORKMANAGERLIT_H

//
// LtNetworkManagerLit.h
//
// CopyRight 2000 Echelon Corporation.  All Rights Reserved.
//				** ECHELON CONFIDENTIAL **
//

//
// $Header: //depot/Software/IzoT/Dev/LonTalkStack/Source/Stack/include/LtNetworkManagerLit.h#3 $
//

#define LT_ABSOLUTE				0
#define LT_READ_ONLY_RELATIVE   1
#define LT_CONFIG_RELATIVE		2
#define LT_STATS_RELATIVE		3
#define LT_NSA_RELATIVE			4

#define LT_MODE_OFFSET			0
#define LT_STATE_OFFSET			1

#define LT_MODE_OFFLINE			0
#define LT_MODE_ONLINE			1
#define LT_MODE_RESET			2
#define LT_MODE_CHANGE_STATE	3
#define LT_MODE_RESET_BUFFER	4	// Used by LNS to force default buffer configuration
									// during a download.
#define LT_MODE_RESET_TX		5	// Resets tx tracking in the node.  Normally, non-Neuron
									// stacks are expected to track tx ids per destination.
									// This tracking is retained over resets.  However, this
									// type of reset forces the node to forget this history.
									// This is defined mainly for testing where it can be
									// a hassle to restart the target every time you want to
									// retest it.  This is based on the assumption that the
									// testing program is trying to track the expect tx
									// ids generated by the stack (as is done by LTV).

#define LT_FLEX_DOMAIN_STATE	4	// This bit in the node state determines whether the node
									// is using flex domain or not.

#define LT_QUERY_STATUS				0x51
#define LT_PROXY					0x52
#define LT_CLEAR_STATUS				0x53
#define LT_QUERY_XCVR_STATUS		0x54
#define LT_QUERY_STATUS_FLEX_DOMAIN	0x56	
#define LT_BIDIR_XCVR_STATUS		0x57
#define LT_COMPUTE_PHASE			0x58

#define LT_EXPANDED                 0x60 // Expanded NM command set. 
#define LT_QUERY_ID					0x61
#define LT_RESPOND_TO_QUERY			0x62
#define LT_UPDATE_DOMAIN			0x63
#define LT_LEAVE_DOMAIN				0x64
#define LT_SECURITY					0x65
#define LT_UPDATE_ADDRESS			0x66
#define LT_QUERY_ADDRESS			0x67
#define LT_QUERY_NETWORK_VARIABLE   0x68
#define LT_UPDATE_GROUP_ADDRESS		0x69
#define LT_QUERY_DOMAIN				0x6A
#define LT_UPDATE_NETWORK_VARIABLE	0x6B
#define LT_NODE_MODE				0x6C
#define LT_READ_MEMORY				0x6D
#define LT_WRITE_MEMORY				0x6E
#define LT_CHECKSUM_RECALC			0x6F
#define LT_WINK						0x70
#define LT_MEMORY_REFRESH			0x71
#define LT_QUERY_SI_DATA			0x72
#define LT_FETCH_NETWORK_VARIABLE   0x73
#define LT_SET_ROUTER_MODE			0x74
#define LT_CLEAR_ROUTING_TABLE		0x75
#define LT_SET_ROUTING_TABLE		0x76
#define LT_SET_GROUP_FWD			0x77
#define LT_SET_SUBNET_FWD			0x78
#define LT_CLEAR_GROUP_FWD			0x79
#define LT_CLEAR_SUBNET_FWD			0x7A
#define LT_QUERY_ROUTING_TABLE		0x7B
#define LT_QUERY_ROUTER_STATUS		0x7C
#define LT_NM_ESCAPE				0x7D
#define LT_ROUTER_ESCAPE			0x7E
#define LT_SERVICE_PIN				0x7F

//
// Subcommands for the NM escape code
//
#define LT_NM_ESCAPE_SUBCOMMAND_OS	0x00	// Subcommand offset in data

#define LT_NM_ESCAPE_GENERAL		0x01
#define LT_NM_ESCAPE_NSS			0x03

// Subcommands of NM escape general
#define LT_NM_ESCAPE_SUBSUBCOMMAND_OS		0x01	// Sub-subcommand offset in data
#define LT_NM_ESCAPE_DATA			0x02			// Offset of data in data

#define LT_NM_ESCAPE_GENERAL_PRODUCT_QUERY	0x01

// Subcommands of NSS escape
#define NM_NS_NSI_RESET_REQUIRED    0x09
#define NM_NS_CHANGE_MIP_MODE		0x0a
#define NM_NS_QUERY_MIP_EEVARS      0x0f
#define NM_NS_SET_NSS_DATA          0x64 
#define NM_NS_GET_MIP_MODE          0x65
#define NM_NS_GET_NSS_DATA          0x66

// Subcommand definitions for LT_ECS (extended command set)
#define LT_ECS						LT_WINK
#define LT_APP_WINK					0x00
#define LT_SEND_ID_INFO				0x01
#define LT_APP_NV_DEFINE			0x02
#define LT_APP_NV_REMOVE			0x03
#define LT_QUERY_NV_INFO			0x04
#define LT_QUERY_NODE_INFO			0x05
#define LT_UPDATE_NV_INFO			0x06
#define LT_NM_GET_CAPABILITY_INFO	0x07
#define LT_UPDATE_NV_VALUE			0x08
#define LT_NM_BATCH					0x09
#define LT_NM_BATCH_ENUM			0x0A
#define LT_NM_BATCH_LEGACY			0x0B
#define LT_NM_BATCH_NMND			0x0C
#define LT_NM_INITIALIZE			0x20
#define LT_NM_CREATE				0x21
#define LT_NM_REMOVE				0x22
#define LT_NM_SET					0x23
#define LT_NM_GET					0x24
#define LT_NM_UPDATE				0x25
#define LT_NM_ENUMERATE				0x26

#define LT_NM_MAX_GEN_SUBCOMMAND    0x7f

//
// Resource specific commands
//

// Node specific commands
#define NM_QUERY_STATUS_FLEX_DOMAIN 0x85

// Domain specific commands
#define LT_NM_SET_AUTH				0x81
#define LT_NM_UPDATE_NO_KEY         0x82 
#define LT_NM_ENUMERATE_NO_KEY      0x83
#define LT_NM_ENUMERATE_AUTH_OMA    0x84
#define LT_NM_SET_AUTH_OMA          0x85

// Specific to monitor control commands (set and point)
#define LT_NM_SET_DESC				0x81
#define LT_NM_GET_DESC				0x82

// Maximum index for ECS objects
#define NM_MAX_INDEX				0xffff

// NM return codes
typedef enum
{
	NMERR_CAUSE_UNKNOWN =			1,
	NMERR_UNSUPPORTED =				2,
	NMERR_NOT_FOUND =				3,
	NMERR_ENUMERATION_END =			4,
	NMERR_ILLEGAL_PARMS =			5,
	NMERR_DENIED =					6,
	NMERR_AUTHENTICATION =			7,
	NMERR_WRITE_FAILURE =			8,
	NMERR_INTERNAL_FAILURE =		9,
	NMERR_OWNER_DOES_NOT_EXIST =	10,
} NmErrCode;

// NM resources
typedef enum
{
	NM_RESERVED =					0,
	NM_NODE	=						1,
	NM_DOMAIN =						2,
	NM_ADDRESS =					3,
	NM_NV_DEF =						4,
	NM_NV_CONFIG =					5,
	NM_ALIAS_CONFIG	=				6,
	NM_MCSET =						0x7D,
	NM_MCPOINT =					0x7E,

	NM_NUM_RESOURCES
} NM_RESOURCES;

// NM response masks
#define LT_NM_PASS					0x20
#define LT_NM_FAIL					0x00

#define NMPASS(cmd)					((cmd & 0x1f) | LT_NM_PASS)
#define NMFAIL(cmd)					((cmd & 0x1f) | LT_NM_FAIL)

// Description masks
#define COMMIT_DESC_DATA			0x01

// Extended capability flags - byte 0
#define EXTCAP_FIXED_STATIC_NVS				0x01
#define EXTCAP_INCOMING_GROUP_RESTRICTED	0x02
#define EXTCAP_MONITORING					0x04
#define EXTCAP_NONUNIQUE_NV_NAMES			0x08
#define EXTCAP_BATCH						0x10
#define EXTCAP_FLUSH						0x20
#define EXTCAP_OMA_COMMANDS                 0x40 
#define EXTCAP_OMA_KEYS                     0x80    // Supports 96 bit keys (OMA commands required).

// Extended capability flags - byte 1
#define EXTCAP_SUPPRESS_DYN_NV_DEF          0x01
#define EXTCAP_SUPPRESS_DYN_FB_DEF          0x02
#define EXTCAP_SUPPRESS_DYN_FB_MBR_DEF      0x04
#define EXTCAP_SUPPORTS_DYNAMIC_NVS_ON_STATIC_FBS 0x08
#define EXTCAP_SUPPORTS_XNVT                0x10  // Support commands to query and define NVs with 2 byte SNVTIDs

// Subcommand definitions for LT_EXPANDED commands (expanded command set)
#define LT_EXP_QUERY_COMMAND_SET_VERSION	        0x01		// V2
#define LT_EXP_UPDATE_NV_BY_INDEX                   0x02        // V2 - LT_EXP_CAP_UPDATE_NV_INDEX
#define LT_EXP_JOIN_DOMAIN_NO_KEY				    0x07		// V2 - LT_EXP_CAP_OMA
#define LT_EXP_QUERY_DOMAIN_NO_KEY				    0x08		// V2 - LT_EXP_CAP_OMA
#define LT_EXP_QUERY_OMA_KEY				        0x09		// V2 - LT_EXP_CAP_OMA
#define LT_EXP_UPDATE_OMA_KEY					    0x0a		// V2 - LT_EXP_CAP_OMA
#define LT_EXP_UPDATE_PROXY_ROUTE_TABLE			    0x0b		// V2 - LT_EXP_CAP_PROXY - Not Used By LNSv
#define LT_EXP_QUERY_PROXY_ROUTE_TABLE			    0x0c		// V2 - LT_EXP_CAP_PROXY - Not Used By LNS
#define LT_EXP_UPDATE_PROXY_ROUTE_INDEX_TABLE	    0x0d		// V2 - LT_EXP_CAP_PROXY - Not Used By LNS
#define LT_EXP_QUERY_PROXY_ROUTE_INDEX_TABLE        0x0e		// V2 - LT_EXP_CAP_PROXY - Not Used By LNS 
#define LT_EXP_INIT_CONFIG                          0x0f        // V2 - LT_EXP_CAP_INIT_CONFIG
// 0x10 available?
#define LT_EXP_UPDATE_NV_CONFIG                     0x11        // EAT
#define LT_EXP_QUERY_NV_CONFIG                      0x12        // EAT
#define LT_EXP_UPDATE_ALIAS_CONFIG                  0x13        // EAT
#define LT_EXP_QUERY_ALIAS_CONFIG                   0x14        // EAT
#define LT_EXP_DEVICE_LS_ADDR_MAPPING_ANNOUNCEMENT  0x15        // Announce LS address. Content doesn't matter, source addr format does.
#define LT_EXP_SUBNETS_LS_ADDR_MAPPING_ANNOUNCEMENT 0x16        // Announce subnets using LS derived IP addresses
#define LT_EXP_SET_LS_ADDR_MAPPING_ANNOUNCEMENTS    0x17        // V2 - LT_EXP_CAP_LSIP_ADDR_MAPPING_ANNOUNCEMENTS
#define LT_EXP_QUERY_LS_ADDR_MAPPING_ANNOUNCEMENTS  0x18        // V2 - LT_EXP_CAP_LSIP_ADDR_MAPPING_ANNOUNCEMENTS
#define LT_EXP_QUERY_IP_ADDR                        0x19        // Query IP address used by device

// The following definitions are used to form a mask indicating the LT_EXP capabilities
// of a given device.
#define LT_EXP_CAP_OMA						    	0x0001
#define LT_EXP_CAP_PROXY						    0x0002
#define LT_EXP_CAP_PHASE_DETECTION				    0x0004
#define LT_EXP_CAP_BI_DIRECTIONAL_SIGNAL_STRENGTH	0x0008
#define LT_EXP_CAP_INIT_CONFIG                      0x0010
#define LT_EXP_CAP_REPORT_MEMORY_MAP                0x0020      // Not supported by VNI
#define LT_EXP_CAP_UPDATE_NV_INDEX                  0x0040
#define LT_EXP_CAP_LS_MODE_MASK                     0x0300      // The LS mode capability is given by two bits
#define LT_EXP_CAP_LS_MODE_COMPATIBILITY_ONLY                  0x0000  
#define LT_EXP_CAP_LS_MODE_ENHANCED_ONLY                0x0100
#define LT_EXP_CAP_LS_MODE_COMPATIBILITY_OR_ENHANCED    0x0200
#define LT_EXP_CAP_LS_MODE_RSVD                         0x0300
#define LT_EXP_CAP_LSIP_ADDR_MAPPING_ANNOUNCEMENTS  0x0400

// The following are PLC special purpose register values
#define LT_PLC_REG_STATUS					2
#define LT_PLC_REG_PRIMARY					3
#define LT_PLC_REG_SECONDARY				4

#endif
